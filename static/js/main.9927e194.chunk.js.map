{"version":3,"sources":["walkergame/GameCanvas.js","walkergame/Timer.js","walkergame/helpers.js","walkergame/Agent.js","walkergame/World.js","walkergame/Game.js","components/GameControls.js","components/PlotComponents.js","components/GameComponent.js","App.js","serviceWorker.js","index.js"],"names":["createEmptyDrawingState","width","height","state","i","row","j","push","GameCanvas","drawnSquareSize","this","boxSize","canvas","document","createElement","id","getElementById","appendChild","context","getContext","drawingState","nextDrawingState","clearRect","x","y","color","col","olderState","newerState","differences","rows","length","console","log","cols","oldColor","newColor","findDifferences","forEach","diff","fillStyle","fillRect","Timer","finished","timer","setTimeout","milliseconds","clearTimeout","randN","N","Math","floor","random","Agent","trailColor","areaWidth","areaHeight","isOutsideArea","xOfPointA","yOfPointA","xOfPointB","yOfPointB","xDiff","yDiff","sqrt","distanceBetweenTwoPoints","World","agents","distanceCounter","Map","maxDistance","origin","toString","xs","agent","ys","Game","squareSize","numberOfAgents","loopInterval","paused","limitSpeed","distancePlotTimer","speedLimitTimer","world","gameCanvas","spawnAgent","hasFinished","start","window","requestAnimationFrame","loop","isInsideArea","addToNextDrawing","step","update","forceToFinish","fps","limit","getAgentXs","getAgentYs","GameControls","props","className","style","margin","textShadow","PauseButton","onPauseButtonClick","gameIsPaused","StepButton","onStepButtonClick","SpeedSlider","gameFPS","gameSpeedLimitIsOn","onFPSChange","SpeedLimitButton","onSpeedLimitButtonClick","onClick","type","min","max","value","onChange","event","target","htmlFor","Plot","createPlotlyComponent","Plotly","XPositionsPlot","data","xPlotXs","xPlotYs","marker","layout","title","text","font","size","xaxis","yaxis","bargap","YPositionsPlot","yPlotXs","yPlotYs","orientation","GameComponent","game","togglePause","stepOnce","changeFPS","changeSpeedLimiter","Plots","refreshPlots","renderXPlot","renderYPlot","screenWidth","screen","availWidth","gameScale","initialAgentCount","gameAgents","canvasWidth","canvasHeight","gameWidth","gameHeight","myGame","setState","toggleSpeedLimit","newValue","setFPS","refreshXPlot","refreshYPlot","countMap","positions","val","has","set","get","top","vals","counts","count","Component","backgroundColor","Page1","IntroText","JohnnieExplanation","Page1EndText","Page2","PlaceHolderContent","Page3","App","page","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9927e194.chunk.js","sourcesContent":["function createEmptyDrawingState(width, height) {\r\n    let state = [];\r\n    for (let i = 0; i < height; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < width; j++) {\r\n            row.push('');\r\n        }\r\n        state.push(row);\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction findDifferences(olderState, newerState) {\r\n    let differences = [];\r\n    let rows = olderState.length;\r\n    if (rows === 0) {\r\n        console.log('Empty olderState');\r\n        return [];\r\n    }\r\n    let cols = olderState[0].length;\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            const oldColor = olderState[row][col];\r\n            const newColor = newerState[row][col];\r\n            if (oldColor !== newColor) {\r\n                differences.push(\r\n                    {\r\n                        x: col,\r\n                        y: row,\r\n                        color: newColor,\r\n                    }\r\n                );\r\n            } else {\r\n                // nop\r\n            }\r\n        }\r\n    }\r\n    return differences;\r\n}\r\n\r\nclass GameCanvas {\r\n    /**\r\n    * Creates a canvas element to the div 'gamecanvasdiv'.\r\n    * @param {number} width width of the canvas element\r\n    * @param {number} height height of the canvas element\r\n    * @param {number} drawnSquareSize size of the squares drawn to the canvas (in pixels)  \r\n    */\r\n    constructor(width=640, height=400, drawnSquareSize=2) {\r\n        this.width   = width;\r\n        this.height  = height;\r\n        this.boxSize = drawnSquareSize;\r\n\r\n        this.canvas        = document.createElement('canvas');\r\n        this.canvas.width  = width  * drawnSquareSize;\r\n        this.canvas.height = height * drawnSquareSize;\r\n        this.canvas.id     = 'game';\r\n        document.getElementById('gamecanvasdiv').appendChild(this.canvas);\r\n\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        this.drawingState = createEmptyDrawingState(width,height);\r\n        this.nextDrawingState = createEmptyDrawingState(width,height);\r\n    }\r\n\r\n    /** Clears the canvas completely */\r\n    clear() {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    addToNextDrawing(x, y, color) {\r\n        const row = y;\r\n        const col = x;\r\n        if (row >= 0 && col >= 0 && row < this.height && col < this.width) {\r\n            this.nextDrawingState[row][col] = color;\r\n        }\r\n    }\r\n\r\n    update() {\r\n        const boxSize = this.boxSize;\r\n        const differences = findDifferences(this.drawingState, this.nextDrawingState);\r\n        differences.forEach(diff => {\r\n            if (diff.color !== '') {\r\n                this.context.fillStyle = diff.color;\r\n                this.context.fillRect(diff.x * boxSize, diff.y * boxSize, boxSize, boxSize);\r\n                this.drawingState[diff.y][diff.x] = diff.color;\r\n            }\r\n        });\r\n        //const tmp = this.nextDrawingState.slice();\r\n        //this.drawingState = tmp;\r\n    }\r\n}\r\n\r\nexport { GameCanvas };","/** Class for tracking time */\r\nclass Timer {\r\n    /** Creates a Timer. */\r\n    constructor() {\r\n        this.finished = true;\r\n        this.timer = setTimeout( () => {}, 1);\r\n    }\r\n\r\n    /**\r\n     * Sets the remaining time and starts the timer.\r\n     * @param {number} milliseconds \r\n     */\r\n    start(milliseconds) {\r\n        this.finished = false;\r\n        this.timer = setTimeout( () => this.finished = true, milliseconds);\r\n        return;\r\n    }\r\n\r\n    /** Returns true if the timer has reached zero. */\r\n    hasFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    /** forces the timer to zero */\r\n    forceToFinish() {\r\n        clearTimeout(this.timer);\r\n        this.finished = true;\r\n        return;\r\n    }\r\n}\r\n\r\nexport { Timer };","/**\r\n * Returns a random integer from range {0,N}\r\n * @param {number} N Maximum random integer, N > 0\r\n * @return {number}\r\n */\r\nfunction randN(N) {\r\n    return Math.floor((Math.random() * N));\r\n}\r\n\r\n/**\r\n * Returns a css color string representing a random color\r\n * @return {string} css rgb color string\r\n */\r\nfunction randomColor() {\r\n    return 'rgb(' + randN(255).toString() + ',' +\r\n        randN(255).toString() + ',' +\r\n        randN(255).toString() + ')';\r\n}\r\n\r\n/**\r\n * Calculates the distance between two points floored to the neares integer\r\n * @param {number} xOfPointA x coordinate of point A\r\n * @param {number} yOfPointA y coordinate of point A\r\n * @param {number} xOfPointB x coordinate of point B\r\n * @param {number} yOfPointB y coordiante of point B\r\n * @return {number}\r\n */\r\nfunction distanceBetweenTwoPoints(xOfPointA, yOfPointA, xOfPointB, yOfPointB) {\r\n    let xDiff = xOfPointA - xOfPointB;\r\n    let yDiff = yOfPointA - yOfPointB;\r\n    return Math.floor(Math.sqrt( xDiff * xDiff + yDiff * yDiff ));\r\n}\r\n\r\nexport { randN, randomColor, distanceBetweenTwoPoints };","import { randN, distanceBetweenTwoPoints } from './helpers.js';\r\n\r\n/** Class representing an agent. */\r\nclass Agent {\r\n    /**\r\n     * Creates an agent.\r\n     * @param {number} x - starting x coordinate \r\n     * @param {number} y - starting y coordinate\r\n     * @param {string} trailColor - css color of the trail the agent leaves behind\r\n     * @param {string} color - css color of the agent\r\n     */\r\n    constructor(x=0, y=0, trailColor='#609609', color='#070707') {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color;\r\n        this.trailColor = trailColor;\r\n    }\r\n\r\n    /** Randomly moves the agent to a neighbor coordinate */\r\n    step() {\r\n        switch (randN(4)) {\r\n            case 0:\r\n                this.x += 1;\r\n                break;\r\n            case 1:\r\n                this.y += 1;\r\n                break;\r\n            case 2:\r\n                this.y -= 1;\r\n                break;\r\n            default:\r\n                this.x -= 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the agent is outside a given area. \r\n     * The area starts from coordinates (0, 0).\r\n     * @param {number} areaWidth \r\n     * @param {number} areaHeight \r\n     * @return {boolean} - true if agent is outside of the given area\r\n     */\r\n    isOutsideArea(areaWidth, areaHeight) {\r\n        return (this.x < 0          ||\r\n                this.x >= areaWidth ||\r\n                this.y < 0          ||\r\n                this.y >= areaHeight);\r\n    }\r\n    \r\n    /**\r\n     * Check if the agent is inside a given area. \r\n     * The area starts from coordinates (0, 0).\r\n     * @param {number} areaWidth \r\n     * @param {number} areaHeight \r\n     * @return {boolean} - true if agent is inside of the given area\r\n     */\r\n    isInsideArea(areaWidth, areaHeight) {\r\n        return !this.isOutsideArea(areaWidth, areaHeight);\r\n    }\r\n\r\n    /**\r\n     * Calculate the agents distance from a point (x, y)\r\n     * @param {number} x x coordinate of a point\r\n     * @param {number} y y coordinate of a point\r\n     * @return {number} the agents distance from the point\r\n     */\r\n    distanceFrom(x, y) {\r\n        return distanceBetweenTwoPoints(this.x, this.y, x, y);\r\n    }\r\n}\r\n\r\nexport { Agent };","import { randomColor } from './helpers.js';\r\nimport { Agent }       from './Agent.js';\r\n\r\n/**\r\n * A world is a 2d plane where Agents move around\r\n */\r\nclass World {\r\n    /**\r\n     * Creates a world.\r\n     * @param {number} width \r\n     * @param {number} height \r\n     */\r\n    constructor(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.agents = [];\r\n        this.distanceCounter = new Map();\r\n        this.maxDistance = 1;\r\n        this.origin = {\r\n            x: Math.floor(width  / 2),\r\n            y: Math.floor(height / 2)\r\n        };\r\n    }\r\n\r\n    /** Creates a new Agent to the middle of the world. */\r\n    spawnAgent() {\r\n        this.agents.push(\r\n            new Agent(this.origin.x, this.origin.y, randomColor())\r\n        );\r\n    }\r\n\r\n    /** \r\n     * Returns an array of the x positions of the agents.\r\n     * @return {Array.<number>} array of x positions\r\n     */\r\n    getAgentXs() {\r\n        let xs = [];\r\n        this.agents.forEach(agent => {\r\n            xs.push(agent.x - this.origin.x);\r\n        });\r\n        return xs;\r\n    }\r\n\r\n    /** \r\n     * Returns an array of the y positions of the agents.\r\n     * @return {Array.<number>} array of y positions\r\n     */\r\n    getAgentYs() {\r\n        let ys = [];\r\n        this.agents.forEach(agent => {\r\n            ys.push(agent.y - this.origin.y);\r\n        });\r\n        return ys;\r\n    }\r\n}\r\n\r\nexport { World };","//import * as distancePlot from './distanceplot.js';\r\nimport { GameCanvas }    from './GameCanvas.js';\r\nimport { Timer }         from './Timer.js';\r\nimport { World }         from './World.js';\r\n\r\n/** A class for running an animation of walking Johhnies */\r\nclass Game {\r\n    /**\r\n     * Creates an instance of Game\r\n     * @param {number} width - width of the game area\r\n     * @param {number} height - height of the game area\r\n     * @param {number} squareSize - the size of drawn squares in pixels\r\n     * @param {number} numberOfAgents - number of moving characters in the game\r\n     */\r\n    constructor(width, height, squareSize, numberOfAgents) {\r\n        this.areaWidth      = width;\r\n        this.areaHeight     = height;\r\n        this.boxSize        = squareSize;\r\n        this.numberOfAgents = numberOfAgents;\r\n\r\n        this.loopInterval  = 1000 / 10;\r\n        this.paused        = true;\r\n        this.limitSpeed    = true;\r\n\r\n        this.distancePlotTimer = new Timer();\r\n        this.speedLimitTimer   = new Timer();\r\n        this.world             = new World(width, height);\r\n\r\n        this.gameCanvas = new GameCanvas(width, height, squareSize);\r\n        //distancePlot.init(numberOfAgents);\r\n\r\n        for (let i = 0; i < numberOfAgents; i++) {\r\n            this.world.spawnAgent();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The main loop.\r\n     * Ticks World once and draws things on GameCanvas.\r\n     */\r\n    loop() {\r\n\r\n        // throttles the rest of this function to be slower than loopInterval.\r\n        // no throttling if the game is paused.\r\n        if (this.limitSpeed) {\r\n            if (this.speedLimitTimer.hasFinished()) {\r\n                this.speedLimitTimer.start(this.loopInterval);\r\n            } else if (!this.paused){\r\n                window.requestAnimationFrame( () => this.loop() );\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.world.agents.forEach(agent => {\r\n            // draw agents trailColor to current position\r\n            if (agent.isInsideArea(this.world.width, this.world.height)) {\r\n                this.gameCanvas.addToNextDrawing(agent.x, agent.y, agent.trailColor);\r\n            }\r\n\r\n            // move agents\r\n            agent.step();\r\n\r\n            // draw dark square to new position\r\n            if (agent.isInsideArea(this.world.width, this.world.height)) {\r\n                this.gameCanvas.addToNextDrawing(agent.x, agent.y, agent.color);\r\n            }\r\n        });\r\n\r\n        // updating distancePlot is throttled for performance reasons\r\n        if (this.distancePlotTimer.hasFinished() || this.paused) {\r\n            //const distances = this.world.getAgentDistances();\r\n            //distancePlot.update(distances);\r\n            this.distancePlotTimer.start(1111);\r\n        }\r\n\r\n        // draw the queued drawing to canvas\r\n        this.gameCanvas.update();\r\n\r\n        if (!this.paused) {\r\n            window.requestAnimationFrame( () => this.loop() );\r\n        }\r\n        return;\r\n    }\r\n\r\n    /** Puts the game on pause if its running and running if its paused */\r\n    togglePause() {\r\n        this.paused = !this.paused;\r\n        this.distancePlotTimer.forceToFinish();\r\n        if (!this.paused) {\r\n            window.requestAnimationFrame( () => this.loop() );\r\n        }\r\n        return;\r\n    }\r\n\r\n    /** Runs the game for a single tick if the game is paused */\r\n    stepOnce() {\r\n        if (this.paused) {\r\n            this.speedLimitTimer.forceToFinish();\r\n            this.distancePlotTimer.forceToFinish();\r\n            window.requestAnimationFrame( () => this.loop() );\r\n        }\r\n        return;\r\n    }\r\n\r\n    /** Set the speed of the game by adjusting the refresh rate */\r\n    setFPS(fps) {\r\n        if (!fps) {\r\n            return;\r\n        }\r\n        if (fps < 1) {\r\n            fps = 1;\r\n        } else if (fps > 30) {\r\n            fps = 30;\r\n        }\r\n\r\n        this.speedLimitTimer.forceToFinish();\r\n        this.distancePlotTimer.forceToFinish();\r\n\r\n        this.loopInterval = 1000 / fps;\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Turn on or off the games speed limit, off targets 60fps\r\n     * @param {boolean} limit true to limit game speed, false for 60fps\r\n     */\r\n    toggleSpeedLimit(limit) {\r\n        this.limitSpeed = limit;\r\n\r\n        this.speedLimitTimer.forceToFinish();\r\n        this.distancePlotTimer.forceToFinish();\r\n\r\n        return;\r\n    }\r\n\r\n    /** Fetches an array of the agents' x positions */\r\n    getAgentXs() {\r\n        return this.world.getAgentXs();\r\n    }\r\n\r\n    /** Fetches an array of the agents' x positions */\r\n    getAgentYs() {\r\n        return this.world.getAgentYs();\r\n    }\r\n}\r\n\r\nexport { Game };","import React from 'react';\r\n\r\nfunction GameControls(props) {\r\n  return(\r\n      <div id=\"gamecontrols\" className=\"container\">\r\n        <div className=\"container\">\r\n          <p style={{ margin: \"0px\", textShadow: \"1px 1px grey\" }}>Speed Controls</p>\r\n        </div>\r\n        <div>\r\n          <PauseButton \r\n            onPauseButtonClick={props.onPauseButtonClick}\r\n            gameIsPaused={props.gameIsPaused}\r\n          />\r\n          <StepButton \r\n            onStepButtonClick={props.onStepButtonClick}\r\n            gameIsPaused={props.gameIsPaused}\r\n          />\r\n        </div>\r\n        <SpeedSlider\r\n          gameFPS={props.gameFPS}\r\n          gameSpeedLimitIsOn={props.gameSpeedLimitIsOn}\r\n          onFPSChange={props.onFPSChange}\r\n        />\r\n        <SpeedLimitButton \r\n          gameSpeedLimitIsOn={props.gameSpeedLimitIsOn}\r\n          onSpeedLimitButtonClick={props.onSpeedLimitButtonClick}\r\n        />\r\n      </div>\r\n  );\r\n}\r\n\r\nfunction PauseButton(props) {\r\n  return (\r\n    <button\r\n      id=\"pauseButton\"\r\n      onClick={props.onPauseButtonClick}\r\n    >\r\n      {props.gameIsPaused ? \"Resume\" : \"Pause\"}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction StepButton(props) {\r\n  return !props.gameIsPaused ? null : (\r\n    <button\r\n      id=\"stepButton\"\r\n      onClick={props.onStepButtonClick}\r\n    >\r\n      Step\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction SpeedSlider(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <input\r\n        type=\"range\"\r\n        min=\"1\"\r\n        max=\"30\"\r\n        value={props.gameSpeedLimitIsOn ? props.gameFPS : 30}\r\n        step=\"1\"\r\n        id=\"FPSSlider\"\r\n        onChange={event => props.onFPSChange(event.target.value)}\r\n      />\r\n      <label htmlFor=\"FPSSlider\">Speed</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SpeedLimitButton(props) {\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={props.onSpeedLimitButtonClick}\r\n      >\r\n        {props.gameSpeedLimitIsOn ? \" Switch to turbo speed\" : \"Switch to normal speed\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { GameControls };\r\n","import React from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nfunction XPositionsPlot(props) {\r\n  return (\r\n    <Plot\r\n      data={[{\r\n        x: props.xPlotXs,\r\n        y: props.xPlotYs,\r\n        marker: {\r\n          color: 'rgb(24,29,44)'\r\n        },\r\n        type: 'bar'\r\n      }]}\r\n      layout={{\r\n        title: {\r\n          text: 'Distribution of Johnnies\\' x-axis positions',\r\n          font: {\r\n            size: 12\r\n          }\r\n        },\r\n        xaxis: {\r\n          title: {\r\n            text: 'position',\r\n            font: {\r\n              size: 12\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'number of Johnnies',\r\n            font: {\r\n              size: 12\r\n            }\r\n\r\n          }\r\n        },\r\n        bargap: 0\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nXPositionsPlot.propTypes = {\r\n  xPlotXs: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n  xPlotYs: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n}\r\n\r\nfunction YPositionsPlot(props) {\r\n  return (\r\n    <Plot\r\n      data={[{\r\n        x: props.yPlotXs,\r\n        y: props.yPlotYs,\r\n        marker: {\r\n          color: 'rgb(24,29,44)'\r\n        },\r\n        type: 'bar',\r\n        orientation: 'h',\r\n      }]}\r\n      layout={{\r\n        title: {\r\n          text: 'Distribution of Johnnies\\' y-axis positions',\r\n          font: {\r\n            size: 12\r\n          }\r\n        },\r\n        xaxis: {\r\n          title: {\r\n            text: 'number of Johnnies',\r\n            font: {\r\n              size: 12\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'position',\r\n            font: {\r\n              size: 12\r\n            }\r\n\r\n          }\r\n        },\r\n        bargap: 0\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nYPositionsPlot.propTypes = {\r\n  yPlotXs: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n  yPlotYs: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n}\r\n\r\nexport {YPositionsPlot, XPositionsPlot};\r\n","import React, {Component} from 'react';\r\nimport {Game} from '../walkergame/Game.js';\r\nimport {GameControls} from './GameControls.js';\r\nimport {XPositionsPlot, YPositionsPlot} from './PlotComponents.js';\r\n\r\nexport class GameComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: null,\r\n      gameIsPaused: true,\r\n      gameSpeedLimitIsOn: true,\r\n      gameFPS: 10,\r\n      xPlotXs: [0],\r\n      xPlotYs: [1],\r\n      yPlotXs: [1],\r\n      yPlotYs: [0],\r\n    };\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <GameCanvas />\r\n          <GameControls\r\n            gameIsPaused={this.state.gameIsPaused}\r\n            gameSpeedLimitIsOn={this.state.gameSpeedLimitIsOn}\r\n            gameFPS={this.state.gameFPS}\r\n            onPauseButtonClick={() => this.togglePause()}\r\n            onStepButtonClick={() => this.state.game.stepOnce()}\r\n            onFPSChange={value => this.changeFPS(value)}\r\n            onSpeedLimitButtonClick={() => this.changeSpeedLimiter()}\r\n          />\r\n        </div>\r\n        <Plots \r\n          refreshPlots={() => this.refreshPlots()}\r\n          xPlotXs={this.state.xPlotXs}\r\n          xPlotYs={this.state.xPlotYs}\r\n          yPlotXs={this.state.yPlotXs}\r\n          yPlotYs={this.state.yPlotYs}\r\n          renderXPlot={this.props.renderXPlot}\r\n          renderYPlot={this.props.renderYPlot}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // game is initialized here because it uses getElementById('gamecanvasdiv')\r\n  // (might want to chage that later...)\r\n  componentDidMount() {\r\n    let screenWidth = window.screen.availWidth;\r\n  \r\n    // how many real pixels is the size of one agent/canvas-pixel\r\n    const gameScale = this.props.gameScale ? this.props.gameScale : 4;\r\n\r\n    // how many agents spawn when the game starts\r\n    const initialAgentCount = this.props.gameAgents ? this.props.gameAgents : 1;\r\n    \r\n    const maxCanvasWidth = 640;\r\n    const canvasWidth  = screenWidth < maxCanvasWidth ? screenWidth : maxCanvasWidth;\r\n    const canvasHeight = Math.floor((5/8) * canvasWidth); // 8:5 aspect ratio\r\n    const gameWidth  = Math.floor(canvasWidth  / gameScale);\r\n    const gameHeight = Math.floor(canvasHeight / gameScale);\r\n  \r\n    const myGame = new Game(gameWidth, gameHeight, gameScale, initialAgentCount);\r\n    this.setState({\r\n      game: myGame,\r\n    });\r\n  }\r\n  \r\n  togglePause() {\r\n    this.state.game.togglePause();\r\n    this.setState(\r\n      {\r\n        gameIsPaused: !this.state.gameIsPaused,\r\n      }\r\n    )\r\n  }\r\n\r\n  changeSpeedLimiter() {\r\n    const limit = !this.state.gameSpeedLimitIsOn;\r\n    this.setState(\r\n      {\r\n        gameSpeedLimitIsOn: limit,\r\n      }\r\n    );\r\n    this.state.game.toggleSpeedLimit(limit);\r\n  }\r\n\r\n  changeFPS(newValue) {\r\n    newValue = Math.floor(newValue)\r\n    if (newValue < 0 || newValue > 60) {\r\n      return;\r\n    }\r\n    this.state.game.setFPS(newValue);\r\n    this.setState(\r\n      {\r\n        gameFPS: newValue,\r\n      }\r\n    );\r\n  }\r\n\r\n  refreshPlots() {\r\n    this.refreshXPlot();\r\n    this.refreshYPlot();\r\n  }\r\n\r\n  refreshXPlot() {\r\n    let countMap = new Map();\r\n    let max = 0;\r\n    let min = 0;\r\n    const positions = this.state.game.getAgentXs();\r\n    for (const val of positions) {\r\n      if (val > max) {\r\n        max = val;\r\n      }\r\n      if (val < min) {\r\n        min = val;\r\n      }\r\n\r\n      if (countMap.has(val)) {\r\n        countMap.set(val, countMap.get(val) + 1);\r\n      } else {\r\n        countMap.set(val, 1);\r\n      }\r\n    }\r\n\r\n    const top = max > -min ? max : -min;\r\n    let vals   = [];\r\n    let counts = [];\r\n    for (let i = -top; i <= top; i++) {\r\n      vals.push(i);\r\n      const count = countMap.has(i) ? countMap.get(i) : 0;\r\n      counts.push(count);\r\n    }\r\n\r\n    this.setState({\r\n      xPlotXs: vals,\r\n      xPlotYs: counts,\r\n    });\r\n  }\r\n\r\n  refreshYPlot() {\r\n    let countMap = new Map();\r\n    let max = 0;\r\n    let min = 0;\r\n    const positions = this.state.game.getAgentYs();\r\n    for (const val of positions) {\r\n      if (val > max) {\r\n        max = val;\r\n      }\r\n      if (val < min) {\r\n        min = val;\r\n      }\r\n\r\n      if (countMap.has(val)) {\r\n        countMap.set(val, countMap.get(val) + 1);\r\n      } else {\r\n        countMap.set(val, 1);\r\n      }\r\n    }\r\n\r\n    const top = max > -min ? max : -min;\r\n    let vals   = [];\r\n    let counts = [];\r\n    for (let i = -top; i <= top; i++) {\r\n      vals.push(i);\r\n      const count = countMap.has(i) ? countMap.get(i) : 0;\r\n      counts.push(count);\r\n    }\r\n\r\n    this.setState({\r\n      yPlotXs: counts,\r\n      yPlotYs: vals,\r\n    });\r\n  }\r\n\r\n}\r\n\r\nfunction Plots(props) {\r\n  const renderXPlot = props.renderXPlot;\r\n  const renderYPlot = props.renderYPlot;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button\r\n        onClick={() => props.refreshPlots()}\r\n        style={{ width: 120, height: 65, backgroundColor: \"red\" }}\r\n      >DEV-refresh-plot</button>\r\n      {renderXPlot && <XPositionsPlot\r\n        xPlotXs={props.xPlotXs}\r\n        xPlotYs={props.xPlotYs}\r\n      />}\r\n      {renderYPlot && <YPositionsPlot\r\n        yPlotXs={props.yPlotXs}\r\n        yPlotYs={props.yPlotYs}\r\n\r\n      />}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction GameCanvas() {\r\n  return <div id=\"gamecanvasdiv\"/>;\r\n}\r\n","import React, {Component} from 'react';\r\nimport {GameComponent} from './components/GameComponent.js';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      page: 1,\r\n    };\r\n  }\r\n  \r\n  render() {\r\n    let page = null;\r\n    if (this.state.page === 1) {\r\n      page = <Page1 />;\r\n    } else if (this.state.page === 2) {\r\n      page = <Page2 />;\r\n    } else if (this.state.page === 3) {\r\n      page = <Page3 />;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <button \r\n          onClick={() => this.setState({page:1})}\r\n          style={{ width: 120, height: 65, backgroundColor: \"red\" }}\r\n        >DEV-test-button page1</button>\r\n        <button \r\n        onClick={() => this.setState({page:2})}\r\n        style={{ width: 120, height: 65, backgroundColor: \"red\" }}\r\n        >DEV-test-button page2</button>\r\n        <button \r\n        onClick={() => this.setState({page:3})}\r\n        style={{ width: 120, height: 65, backgroundColor: \"red\" }}\r\n        >DEV-test-button page3</button>\r\n        {page}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Page1() {\r\n  return(\r\n    <div className=\"solocontainer\">\r\n      <div>\r\n        <IntroText />\r\n        <JohnnieExplanation />\r\n        <GameComponent\r\n          renderXPlot={false}\r\n          renderYPlot={false}\r\n        />\r\n        <Page1EndText />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Page2() {\r\n  return(\r\n    <div>\r\n      <div>\r\n        <GameComponent \r\n          renderXPlot={true}\r\n          renderYPlot={false}\r\n          gameAgents={15}\r\n          gameScale={8}\r\n        />\r\n      </div>\r\n      <div className=\"container\">\r\n        <PlaceHolderContent />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Page3() {\r\n  return(\r\n    <div>\r\n      <div className=\"container\"><p>This is page 3</p></div>\r\n      <div>\r\n        <GameComponent \r\n          renderXPlot={true}\r\n          renderYPlot={true}\r\n          gameAgents={1500}\r\n          gameScale={4}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction IntroText() {\r\n  return (\r\n    <div className=\"solocontainer\">\r\n      <div id=\"introtext\">\r\n        <h1>The Walking Johnnie</h1>\r\n        <p>Johnnies are little dark dots.</p>\r\n        <p>They like to move around.</p>\r\n        <p>They leave a colorful trail behind.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction JohnnieExplanation() {\r\n  return (\r\n    <div className=\"textcontent\">\r\n      <p>\r\n        A Walking Johnnie will move either up, down, left or right \r\n        with an equal one out of four propability for each direction.\r\n        It will never stand still. \r\n      </p>\r\n      <p>\r\n        Below is one randomly moving Johnnie wandering around in a box. \r\n        Try unpausing him using the speed controls below!\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Page1EndText() {\r\n  return (\r\n    <div className=\"textcontent\">\r\n      <p>\r\n        Where did your Johnnie walk to? \r\n        Do you think there is any point in trying to guess that beforehand?\r\n        How likely is it for the johnnie to return to its starting position?\r\n      </p>\r\n      <br />\r\n      <p>\r\n        If we forget the up-down movement for a second, how will the Johhnie move?\r\n        When it moves up or down, it doesn't move left or right.\r\n        So when ignoring vertical moves, \r\n        our meningful options are moving left or moving right.\r\n      </p>\r\n      <p>\r\n        Imagine fipping a coin and moving the Johnnie left on heads and right on tails.\r\n        Then, for the Johnnie to be back at the center, you would have to flip \r\n        exactly the same amount of heads as tails. Five heads and seven tails \r\n        would place the Johnnie two steps right from the center. \r\n        Getting to ten squares west in only ten steps would translate to flipping a \r\n        coin and it landing on heads ten times in a row.\r\n      </p>\r\n      <p>\r\n        You might think that the Johnnie would not move far from the center.\r\n        After all, there is an equal chance of moving left and moving right. \r\n        Surely the walking dark dot will undo each upward movement with \r\n        a downward movement, at least on average? \r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PlaceHolderContent() {\r\n  return (\r\n    <div className=\"regularsize placeholder container\">\r\n      <p>placeholder content</p>\r\n    </div>\r\n  ); \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}